# -*- coding: utf-8 -*-
"""mnist  digit classification6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15c6bedMCqcXTrIFFLXPTwwBZZdfvgbX4

import the required library

MNIST dataset machine learning aur deep learning me ek sabse popular benchmark dataset hai, jo mainly handwritten digit recognition ke liye use hota hai. Ye beginners ke liye perfect hai kyunki isme images simple aur well-labeled hote hain.

MNIST Dataset Details:

Full form: Modified National Institute of Standards and Technology

Task: Handwritten digit (0–9) classification

Image size: 28 × 28 pixels

Color: Grayscale (ek hi channel, pixel values 0–255)

Number of classes: 10 (digits 0–9)

Train images: 60,000

Test images: 10,000
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow import keras
import cv2
from PIL import Image
import os
from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten
from keras.layers import Conv2D, MaxPooling2D
from keras import backend as K
from tensorflow.math import confusion_matrix
from tensorflow.keras.utils import to_categorical

"""load the dataset"""

(x_train,y_train),(x_test,y_test)=mnist.load_data()

x_train

"""->**pipeline of the dataset**
1.data gathering
2.explore the data
3.resize the image
4.convert to array
5.Normalize
6.Buiding the neural network
7.check model is overfitting and underfitting and remove the overfitting and   underfitting
8.convert to class  in probability
9.and predict the image
10. build the predict system
11. model save
12. deploy the model in steamlit

"""

type(x_train)

print(x_train.shape)

"""dataset present  all image  grayscale because give the image channel is 1 so."""

print(x_train.shape,x_test.shape,y_train.shape,y_test.shape)

print(x_train[0])

print(x_train[0].shape)

# display the image than can see
plt.imshow(x_train[0])

plt.imshow(x_train[10],cmap='gray')
print(y_train[10])

# print number of class in the datset
print(np.unique(y_train))
print(np.unique(y_test))

"""number of class present in dataset is 10

scaling the values of all image
"""

x_train=x_train/255
x_test=x_test/255

print(x_train[0])

print(x_test[0])

"""Build the model network in cnn"""

model=Sequential()
model.add(Conv2D(32,kernel_size=(3,3),activation='relu',padding='valid',input_shape=(28,28,1)))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Conv2D(64,kernel_size=(3,3),activation='relu',padding='valid' ))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Conv2D(128,kernel_size=(3,3),activation='relu',padding='valid' ))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Flatten())
model.add(Dense(128,activation='relu'))
model.add(Dense(10,activation='softmax'))

model.summary()

model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])

model.fit(x_train,y_train,epochs=10,batch_size=128)

# accuracy test
loss,accuracy=model.evaluate(x_test,y_test)
print(accuracy)

print(x_test.shape)

plt.imshow(x_test[0])

y_pred=model.predict(x_test)

print(y_pred.shape)

print(y_pred[0])

"""this is probability so can convert the number in range 0 to 9"""

y_pred_labels=[np.argmax(i) for i in y_pred]

print(y_pred_labels)

"""plot the confusion matrix"""

conf_mat=confusion_matrix(y_test,y_pred_labels)

import seaborn as sns

plt.figure(figsize=(15,7))
sns.heatmap(conf_mat,annot=True,fmt='d',cmap='Blues')
plt.ylabel('True Labels')
plt.xlabel('Predicted Labels')

# Build the predicted system

# input_image_path='/content/VChE0.png'

input_image_path = '/content/thumb.jpg'

input_image = cv2.imread(input_image_path)

type(input_image)

print(input_image)

cv2_imshow(input_image)

input_image.shape

grayscale = cv2.cvtColor(input_image, cv2.COLOR_RGB2GRAY)

grayscale.shape

input_image_resize = cv2.resize(grayscale, (28, 28))

input_image_resize.shape

cv2_imshow(input_image_resize)

input_image_resize = input_image_resize/255

type(input_image_resize)

image_reshaped = np.reshape(input_image_resize, [1,28,28])

input_prediction = model.predict(image_reshaped)
print(input_prediction)

input_pred_label = np.argmax(input_prediction)

print(input_pred_label)

input_image_path = input('Path of the image to be predicted: ')

input_image = cv2.imread(input_image_path)

cv2_imshow(input_image)

grayscale = cv2.cvtColor(input_image, cv2.COLOR_RGB2GRAY)

input_image_resize = cv2.resize(grayscale, (28, 28))

input_image_resize = input_image_resize/255

image_reshaped = np.reshape(input_image_resize, [1,28,28])

input_prediction = model.predict(image_reshaped)

input_pred_label = np.argmax(input_prediction)

print('The Handwritten Digit is recognised as ', input_pred_label)

# Save the model
model.save('mnist_cnn_model.h5')